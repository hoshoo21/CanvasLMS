@model LMS.Areas.Canvas.Models.CanvasAutoResponderModel
@{
    ViewBag.Title = "Rule Detail";
}

<style type="text/css">
    textarea
    {
        resize: none;
        overflow-x: hidden;
        overflow-y: auto;
    }
</style>

<h4>@ViewBag.Title</h4>
<form>
    @Html.AntiForgeryToken()
    <hr />
    <div class="row">
        <div class="form-group col-md-4">
            @Html.HiddenFor(m => m.CanvasRuleId)
            @Html.LabelFor(m => m.CanvasRuleTitle) :
            @Html.TextBoxFor(m => m.CanvasRuleTitle, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.CanvasRuleTitle)
        </div>
    </div>
    <div class="row">
        <div class="col-md-8 form-group">
            @Html.LabelFor(m => m.Answer) :
            @Html.TextAreaFor(m => m.Answer, 5, 40, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Answer)
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-3">
            @functions {
                object getHtmlAttributes(bool ReadOnly, string CssClass)
                {
                    if (ReadOnly)
                    {
                        return new { @class = CssClass, disabled = "disabled" };
                    }
                    return new { @class = CssClass };
                }
            }
            @Html.LabelFor(m => m.RuleFor) :
            @Html.DropDownListFor(m => m.RuleFor, Model.RuleTypes, @getHtmlAttributes(Model.CanvasRuleId > 0, "form-control"))
            @Html.ValidationMessageFor(m => m.RuleFor)
        </div>
        <div class="form-group col-md-3">
            @Html.LabelFor(m => m.MatchType) :
            @Html.DropDownListFor(m => m.MatchType, Model.ConditionTypes, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.MatchType)
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-8">
            @Html.LabelFor(m => m.Question) :
            @Html.TextAreaFor(m => m.Question, 5, 40, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Question)
        </div>

    </div>
    <div class="row">
        @*<div class="form-group col-md-4">
                @Html.NameFor(m => m.Active) : @Html.CheckBoxFor(m => m.Active);
            </div>*@
        <div class="form-group col-md-8 text-right" style="margin-top: 20px;">
            <button type="button" id="btnAddcondition" class="btn btn-success">Add To Condition(s)</button>
        </div>
    </div>
    <div class="row" style="display:none; visibility: hidden;">
        <div class="form-group col-md-4 ">
            <button type="button" id="btnExecute" class="btn btn-success">Execute Rules Engines</button>
        </div>
    </div>
    <hr />
    <div class="row" style="margin-top: 20px;">

    </div>
    <div class="row">
        <div class="form-group col-md-10">
            <div class="panel panel-primary filterable">
                <div class="panel-heading">
                    <h3 class="panel-title">Existing Conditions</h3>
                </div>
                <table class="table" id="conditions">
                    <thead style="color:white">
                        <tr style="color:white">
                            <th>@Html.DisplayNameFor(m => m.RuleFor)</th>
                            <th>@Html.DisplayNameFor(m => m.MatchType)</th>
                            <th>@Html.DisplayNameFor(m => m.Question)</th>
                            <th style="text-align: center;">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.lstQuestions != null && Model.lstQuestions.Count > 0)
                        {
                            foreach (var aQuestion in Model.lstQuestions)
                            {
                                string sRuleFor = (from r in Model.RuleTypes
                                                   where (r.Value == Convert.ToString(Model.CanvasRuleFor))
                                                   select r.Text)
                                                   .FirstOrDefault();
                                string sConditionType = (from ct in Model.ConditionTypes
                                                         where (ct.Value == Convert.ToString(aQuestion.MatchType))
                                                         select ct.Text)
                                                       .FirstOrDefault();
                                <tr data-question-id="@aQuestion.CanvasQuestionId">
                                    <td>
                                        @sRuleFor
                                    </td>
                                    <td>
                                        @sConditionType
                                    </td>
                                    <td>
                                        @aQuestion.CanvasQuestion
                                    </td>
                                    <td style="text-align: center;">
                                        <a href="javascript:void()" class="delete-question" title="Delete this question">Delete</a>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <input type="submit" value="Submit" class="btn btn-success save-rule" />
        </div>
        <div class="col-md-6">
            @Html.ActionLink("Cancel", "AutoRespondRules", "CanvasResponder", new { Area = "Canvas" }, new { @class = "btn btn-success" } )
        </div>
    </div>
    <script src="~/Scripts/jquery-1.10.2.js"></script>
    <script language="javascript" type="text/javascript">
        $(function () {
            bindAddCondition();
        })
        function bindAddCondition() {
            $('#btnAddcondition').click(function () {
                var drpRuleFor = $('#@Html.IdFor(m => m.RuleFor)');
                var drpMatchingCondition = $('#@Html.IdFor(m => m.MatchType)');
                var txtQuestion = $('#@Html.IdFor(m => m.Question)');
                if ($(drpRuleFor).valid() && $(drpMatchingCondition).valid() && $(txtQuestion).valid()) {
                    var tbl = $('#conditions');
                    var tr = $('<tr/>').attr('data-new-rule', 'true').appendTo(tbl);
                    $(tr).attr('data-rule-for', $(drpRuleFor).find(":selected").val())
                    $(tr).attr('data-condition-type', $(drpMatchingCondition).find(":selected").val())

                    $(tr).append($('<td/>').html($(drpRuleFor).find(":selected").text()));
                    $(tr).append($('<td/>').html($(drpMatchingCondition).find(":selected").text()));
                    $(tr).append($('<td/>').addClass('canvas-question').text($(txtQuestion).val()));

                    var lnkRemove = $('<a/>')
                        .text('Delete')
                        .attr('title', 'Delete this question')
                        .click(function () {
                            var tr = $(this).parents('tr[data-new-rule="true"]:first');
                            if (tr != null && tr.length > 0) {
                                if (confirm('Are you sure you want to delete this question?')) {
                                    $(tr).remove();
                                }
                            }
                            return false;
                        });
                    $(tr).append($('<td/>').css({ 'text-align': 'center' }).append(lnkRemove));

                    $(drpRuleFor).prop('disabled', 'disabled');
                    $($(drpMatchingCondition).val($(drpMatchingCondition).find('option:first').val()));
                    $(txtQuestion).val('');
                }
                return false
            })
        }
        $('.delete-question').each(function (index, lnk) {
            $(lnk).click(function (e) {
                var lnk = this;
                if (confirm('Are you sure you want to delete this question?')) {
                    var tr = $(lnk).parents('tr[data-question-id]');
                    if (tr != null) {
                        var questionId = $(tr).data('question-id');
                        var token = $(lnk).parents('form:first').find('input[name="__RequestVerificationToken"]').val();
                        var options = {
                            url: '@Url.Action("DeleteQuestion", "CanvasResponder", new { Area = "Canvas" })'
                        , type: 'POST'
                        , async: false
                        , data: {
                            __RequestVerificationToken: token
                            , questionId: questionId
                            }
                        };
                        $.ajax(options)
                        .success(function (data) {
                            if (data.Success == true) {
                                $(tr).remove();
                            }
                        })
                    }
                }
                return false;
            })
        })
        $('.save-rule').click(function () {
            if ($('#@Html.IdFor(m => m.CanvasRuleTitle)').valid() && $('#@Html.IdFor(m => m.Answer)').valid()) {
                var tbl = $('#conditions');
                var newRules = $(tbl).find('[data-new-rule="true"]');
                if (newRules.length <= 0) {
                    var existingCount = $(tbl).find('tr').not('thead tr').length;
                    if (existingCount <= 0)
                    {
                        alert('Atleast 1 rule is required to save.')
                        return false;
                    }
                }
                var model = {
                    CanvasRuleId: $('#@Html.IdFor(m => m.CanvasRuleId)').val()
                    , CanvasRuleTitle: $('#@Html.IdFor(m => m.CanvasRuleTitle)').val()
                    , Answer: $('#@Html.IdFor(m => m.Answer)').val()
                    , RuleForId: $('#@Html.IdFor(m => m.RuleFor)').val()
                    , Active: $('#@Html.IdFor(m => m.Active)').val()
                    , AnsweringRules: []
                }
                $(newRules).each(function (index, row) {
                    var aRule = {
                        RuleFor: $(row).data('rule-for')
                        , MatchType: $(row).data('condition-type')
                        , Question: $(row).find('td.canvas-question').text()
                    };
                    model.AnsweringRules.push(aRule);
                })
                var token = $(this).parents('form:first').find('input[name="__RequestVerificationToken"]').val();
                var options = {
                    url: '@Url.Action("SaveCanvasRules", "CanvasResponder", new { Area = "Canvas" })'
                    , type: 'POST'
                    , async: false
                    , data: {
                        __RequestVerificationToken: token
                        , model: model
                    }
                }
                $.ajax(options)
                    .success(function (data) {
                        var a = 1;
                        if (data.Success == true) {
                            window.location.href = '@Url.Action("AutoRespondRules", "CanvasResponder", new { Area = "Canvas" })'
                        }
                        else {
                            alert(data.Message);
                        }
                    })
            }

            return false;
        })
    </script>
</form>

